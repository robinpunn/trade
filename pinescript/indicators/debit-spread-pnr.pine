// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © IVI4yh3IVI

indicator("Debit Spread Point of No Return", overlay=true)

// User inputs for trade open and expiration dates
tradeOpenDate = input.time(defval=timestamp("2024-07-01"), title="Trade Open Date")
tradeExpDate = input.time(defval=timestamp("2024-07-15"), title="Trade Expiration Date")
longStrikePrice = input.price(defval=100.0, title="Long Strike Price")
shortStrikePrice = input.price(defval=95.0, title="Short Strike Price")
holidayAdjustment = input.int(0, title="Holiday Adjustment (days)", tooltip="Adjust for holidays: negative to move closeLine left, positive to move right")

// Variables for lines and labels
var line openLine = na
var line closeLine = na
var line diagonalLine = na
var line longStrikeLevel = na
var line shortStrikeLevel = na
var label longStrikeLabel = na
var label shortStrikeLabel = na
var label pnrLabel = na
var float PNR = 0.0

// ATR input
atrLength = input.int(14, title="ATR Length", minval=1)
atrMultiplier = input.float(1, title="ATR Multiplier", step=0.1)

// Calculate ATR
atr = ta.atr(atrLength) * atrMultiplier

// Function to count trading days between two dates
countTradingDays(startDate, endDate) =>
    tradingDays = 0
    for i = 0 to 500  // Assuming maximum 1000 calendar days between dates
        currentDate = startDate + i * 86400000  // Add i days in milliseconds
        if currentDate > endDate
            break
        dayOfWeek = dayofweek(currentDate)
        if dayOfWeek != dayofweek.sunday and dayOfWeek != dayofweek.saturday
            tradingDays += 1
    tradingDays

// Calculate trading days until expiration
tradingDaysUntilExpiration = countTradingDays(tradeOpenDate, tradeExpDate)

// Calculate PNR price
if longStrikePrice < shortStrikePrice
    PNR := longStrikePrice - (longStrikePrice * tradingDaysUntilExpiration * atr) / 2000
else 
    PNR := longStrikePrice + (longStrikePrice * tradingDaysUntilExpiration * atr) / 2000

formattedPNR = str.tostring(PNR, "#.##")

// Find the correct bar indices
isOpenBar = time >= tradeOpenDate and time[1] < tradeOpenDate
openBarIndex = ta.valuewhen(isOpenBar, bar_index, 0)
// openBarIndex = ta.valuewhen(true, bar_index, 0)

// Calculate the number of bars between open date and expiration date
barsBetweenDates = tradingDaysUntilExpiration + holidayAdjustment

// Calculate the close bar index
closeBarIndex = openBarIndex + barsBetweenDates

if barstate.islast
    if not na(openBarIndex)
        if na(openLine)
            openLine := line.new(x1=openBarIndex, y1=low, x2=openBarIndex, y2=high, extend=extend.both, color=color.blue, width=3)
            pnrLabel := label.new(x=openBarIndex, y=PNR, text=formattedPNR, color=color.red, textcolor=color.white, style=label.style_label_right)
        else
            line.set_x1(openLine, openBarIndex)
            line.set_x2(openLine, openBarIndex)
            line.set_y1(openLine, low)
            line.set_y2(openLine, high)
            label.set_x(pnrLabel, openBarIndex)
            label.set_y(pnrLabel, PNR)

    safeCloseBarIndex = math.min(closeBarIndex, bar_index + 499)

    if not na(safeCloseBarIndex)
        if na(closeLine)
            closeLine := line.new(x1=safeCloseBarIndex, y1=low, x2=safeCloseBarIndex, y2=high, extend=extend.both, color=color.red, width=3)
            longStrikeLabel := label.new(x=safeCloseBarIndex, y=longStrikePrice, text=str.tostring(longStrikePrice), color=color.green, textcolor=color.white, style=label.style_label_left)
            shortStrikeLabel := label.new(x=safeCloseBarIndex, y=shortStrikePrice, text=str.tostring(shortStrikePrice), color=color.red, textcolor=color.white, style=label.style_label_left)

            longStrikeLevel := line.new(x1=openBarIndex, y1=longStrikePrice, x2=safeCloseBarIndex, y2=longStrikePrice, color=color.green, style=line.style_dashed)
            shortStrikeLevel := line.new(x1=openBarIndex, y1=shortStrikePrice, x2=safeCloseBarIndex, y2=shortStrikePrice, color=color.red, style=line.style_dashed)
        else
            line.set_x1(closeLine, safeCloseBarIndex)
            line.set_x2(closeLine, safeCloseBarIndex)
            line.set_y1(closeLine, low)
            line.set_y2(closeLine, high)
            label.set_x(longStrikeLabel, safeCloseBarIndex)
            label.set_y(longStrikeLabel, longStrikePrice)
            label.set_x(shortStrikeLabel, safeCloseBarIndex)
            label.set_y(shortStrikeLabel, shortStrikePrice)

            line.set_x1(longStrikeLevel, openBarIndex)
            line.set_x2(longStrikeLevel, safeCloseBarIndex)
            line.set_y1(longStrikeLevel, longStrikePrice)
            line.set_y2(longStrikeLevel, longStrikePrice)
            line.set_x1(shortStrikeLevel, openBarIndex)
            line.set_x2(shortStrikeLevel, safeCloseBarIndex)
            line.set_y1(shortStrikeLevel, shortStrikePrice)
            line.set_y2(shortStrikeLevel, shortStrikePrice)

    if not na(openBarIndex) and not na(safeCloseBarIndex)
        if na(diagonalLine)
            diagonalLine := line.new(x1=openBarIndex, y1=PNR, x2=safeCloseBarIndex, y2=shortStrikePrice, color=color.yellow, style=line.style_dashed, width=1)
        else
            line.set_x1(diagonalLine, openBarIndex)
            line.set_y1(diagonalLine, PNR)
            line.set_x2(diagonalLine, safeCloseBarIndex)
            line.set_y2(diagonalLine, shortStrikePrice)
