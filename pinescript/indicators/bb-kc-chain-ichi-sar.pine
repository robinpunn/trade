//@version=5
indicator(shorttitle="Multi-Channel Cloud", title="Bollinger/Keltner/Donchain/Ichimoku Cloud", overlay=true, timeframe="", timeframe_gaps=true)

// bollinger params
bb_length = input.int(20, minval=1, title="BB Length")
bb_maType = input.string("SMA", "BB Basis MA Type", options = ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
bb_src = input(close, title="BB Source")
bb_mult_d2 = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev")
bb_mult_d1 = input.float(1.0, minval=0.001, maxval=50, title="BB StdDev")

// keltner params
kc_length = input.int(20, minval=1, title="KC Length")
kc_mult = input(2.0, "KC Multiplier")
kc_src = input(close, title="KC Source")
kc_exp = input(true, "KC Use Exponential MA", display = display.data_window)
kc_BandsStyle = input.string("Average True Range", options = ["Average True Range", "True Range", "Range"], title="Bands Style", display = display.data_window)
kc_atrlength = input(10, "KC ATR Length", display = display.data_window)

// donchain params
don_length = input.int(20, minval = 1)
don_offset = input.int(0)
don_lower =  ta.lowest(don_length)
don_upper =  ta.highest(don_length)
don_basis =  math.avg(don_upper, don_lower)

// ichimoku params
conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Lagging Span")

// sar params
sar_start = input(0.02)
sar_increment = input(0.02)
sar_maximum = input(0.2, "Max Value")
sar_out = ta.sar(sar_start, sar_increment, sar_maximum)


// moving average function for bollinger
ma(source, length, _type) =>
    switch _type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

// moving average function for keltner
esma(source, length)=>
	kc_exp ? ta.ema(source, length) : ta.sma(source, length)

// function for ichimoku
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))

// bollinger calculation
bb_basis = ma(bb_src, bb_length, bb_maType)
bb_dev2 = bb_mult_d2 * ta.stdev(bb_src, bb_length)
bb_dev1 = bb_mult_d1 * ta.stdev(bb_src, bb_length)
bb_upper_d2 = bb_basis + bb_dev2
bb_lower_d2 = bb_basis - bb_dev2
bb_upper_d1 = bb_basis + bb_dev1
bb_lower_d1 = bb_basis - bb_dev1

// keltner calculation
kc_ma = esma(kc_src, kc_length)
kc_rangema = kc_BandsStyle == "True Range" ? ta.tr(true) : kc_BandsStyle == "Average True Range" ? ta.atr(kc_atrlength) : ta.rma(high - low, kc_length)
kc_upper = kc_ma + kc_rangema * kc_mult
kc_lower = kc_ma - kc_rangema * kc_mult

// ichimoku calculations
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)

// bollinger plotting
offset = input.int(0, "BB Offset", minval = -500, maxval = 500, display = display.data_window)
plot(bb_basis, "Basis", color=#2ef273, offset = offset)
bb_p1_d2 = plot(bb_upper_d2, "BB Upper21", color=#77fd9d, offset = offset)
bb_p2_d2 = plot(bb_lower_d2, "BB Lower22", color=#77fd9d, offset = offset)
bb_p1_d1 = plot(bb_upper_d1, "BB Upper11", color=#77fd9d, offset = offset)
bb_p2_d1 = plot(bb_lower_d1, "BB Lower12", color=#77fd9d, offset = offset)
fill(bb_p1_d2, bb_p2_d2, title = "BB Background d2", color=color.rgb(0, 105, 191, 95))
fill(bb_p1_d1, bb_p2_d1, title = "BB Background d1", color=color.rgb(0, 105, 191, 95))

// keltner plot
plot(kc_ma, color=#646f8f, title="KC Basis")
kc_u = plot(kc_upper, color=#646f8f, title="KC Upper")
kc_l = plot(kc_lower, color=#646f8f, title="KC Lower")
fill(kc_u, kc_l, color=color.rgb(60, 0, 64, 85), title="KC Background")

// donchain plot
plot(don_basis,     "Basis", color = #2962FF, offset = don_offset)
don_u = plot(don_upper, "Upper", color = #2962FF, offset = don_offset)
don_l = plot(don_lower, "Lower", color = #2962FF, offset = don_offset)
fill(don_u, don_l, color = color.rgb(33, 150, 243, 95), title = "Background")

// ichomoku plot
ichimoku_p1 = plot(leadLine1, offset = displacement - 1, color=#A5D6A7,
	 title="Leading Span A")
ichimoku_p2 = plot(leadLine2, offset = displacement - 1, color=#EF9A9A,
	 title="Leading Span B")
plot(leadLine1 > leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Upper Line", display = display.none) 
plot(leadLine1 < leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Lower Line", display = display.none) 
fill(ichimoku_p1, ichimoku_p2, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 71, 90) : color.rgb(244, 67, 54, 90))

// sar plot
plot(sar_out, "ParabolicSAR", style=plot.style_cross, color=#2962FF)
