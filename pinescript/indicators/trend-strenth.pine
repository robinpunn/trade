//@version=5
indicator(title="Dynamic Trend Strength Oscillator", shorttitle="DTSO", overlay=false)

// Inputs
basePeriods = input.int(26, minval=1, title="Base Line Length")
maPeriods = input.int(9, minval=1, title="Moving Average Length")
pointsPeriods = input.int(5, minval=1, title="Points Period")
pointsPeriods2 = input.int(20, minval=1, title="Points Period")
avgLength = input.int(50, minval=1, title="Average Length")
lensig = input.int(14, title="ADX Smoothing", minval=1, maxval=50)
len = input.int(14, minval=1, title="DI Length")
trendLookback = input.int(5, minval=1, title="Trend Lookback Period")
cmfDecreaseThreshold = input.float(20, title="CMF Decrease Threshold", step=0.01)
cmfIncreaseThreshold = input.float(10, title = "CMF Increase Threshold")

// Kijun Sen
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
baseLine = donchian(basePeriods)

// CMF
var cumVol = 0.
cumVol += nz(volume)
ad = close == high and close == low or high == low ? 0 : ((2 * close - low - high) / (high - low)) * volume
mf = math.sum(ad, avgLength) / math.sum(volume, avgLength)
avgCMF = ta.sma(mf, avgLength)

// Calculate CMF percentage increase
cmfPrev1 = nz(mf[1])
cmfPrev2 = nz(mf[2])
cmfPrev3 = nz(mf[3])
cmfPrev4 = nz(mf[4])
cmfPrev5 = nz(mf[5])
epsilon = 1e-10  // Small value to prevent division by zero

cmfChange1 = cmfPrev1 != 0 ? (mf - cmfPrev1) / math.abs(cmfPrev1) * 100 : (mf - cmfPrev1) / epsilon * 100
cmfChange2 = cmfPrev2 != 0 ? (mf - cmfPrev2) / math.abs(cmfPrev2) * 100 : (mf - cmfPrev2) / epsilon * 100
cmfChange3 = cmfPrev1 != 0 ? (mf - cmfPrev1) / math.abs(cmfPrev3) * 100 : (mf - cmfPrev3) / epsilon * 100
cmfChange4 = cmfPrev2 != 0 ? (mf - cmfPrev2) / math.abs(cmfPrev4) * 100 : (mf - cmfPrev4) / epsilon * 100
cmfChange5 = cmfPrev1 != 0 ? (mf - cmfPrev1) / math.abs(cmfPrev5) * 100 : (mf - cmfPrev5) / epsilon * 100

// DI
up = ta.change(high)
down = -ta.change(low)
plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
trur = ta.rma(ta.tr, len)
plus = fixnan(100 * ta.rma(plusDM, len) / trur)
minus = fixnan(100 * ta.rma(minusDM, len) / trur)

// Request both daily and weekly data
dailyKijun = request.security(syminfo.tickerid, "D", baseLine)
dailyCMF = request.security(syminfo.tickerid, "D", mf)
dailyAvgCMF = request.security(syminfo.tickerid, "D", avgCMF)
dailyPlus = request.security(syminfo.tickerid, "D", plus)
dailyMinus = request.security(syminfo.tickerid, "D", minus)
dailyVWAP = request.security(syminfo.tickerid, "D", ta.vwap(50))

weeklyKijun = request.security(syminfo.tickerid, "W", baseLine)
weeklyCMF = request.security(syminfo.tickerid, "W", mf)
weeklyAvgCMF = request.security(syminfo.tickerid, "W", avgCMF)
weeklyPlus = request.security(syminfo.tickerid, "W", plus)
weeklyMinus = request.security(syminfo.tickerid, "W", minus)
weeklyVWAP = request.security(syminfo.tickerid, "W", ta.vwap(50))

// Determine which data to use based on the current chart timeframe
useDailyData = timeframe.period == "240" // 4-hour chart
useWeeklyData = timeframe.period == "D"  // Daily chart

// Select data based on the current chart timeframe
slowKijun = useDailyData ? dailyKijun : (useWeeklyData ? weeklyKijun : na)
slowCMF = useDailyData ? dailyCMF : (useWeeklyData ? weeklyCMF : na)
slowAvgCMF = useDailyData ? dailyAvgCMF : (useWeeklyData ? weeklyAvgCMF : na)
slowPlus = useDailyData ? dailyPlus : (useWeeklyData ? weeklyPlus : na)
slowMinus = useDailyData ? dailyMinus : (useWeeklyData ? weeklyMinus : na)
slowVWAP = useDailyData ? dailyVWAP : (useWeeklyData ? weeklyVWAP : na)

// Function to determine if the current chart is a 4-hour chart
is4HChart() =>
    timeframe.period == "240"

// Function to determine if the current chart is a daily chart
isDailyChart() =>
    timeframe.period == "D"

// Trend Detection
isTrendingUp(series, lookback) =>
    series[0] > ta.sma(series, lookback)

isTrendingDown(series, lookback) =>
    series[0] < ta.sma(series, lookback)

// Functions to calculate points
calculateKijunPoints(baseLine, slowKijun, crossSlowKijun, slowVWAP) =>
    float localPoints = 0
    if isTrendingUp(baseLine, trendLookback)
        localPoints += 3
    if isTrendingDown(baseLine, trendLookback)
        localPoints -= 3
    if baseLine > ta.vwap(50)
        localPoints += 3
    if baseLine < ta.vwap(50)
        localPoints -= 3
    if close < slowKijun
        localPoints -= 5
    if close > slowKijun
        localPoints += 2
    if crossSlowKijun
        localPoints += 3
    if isTrendingUp(slowKijun, trendLookback)
        localPoints += 5
    if isTrendingDown(slowKijun, trendLookback)
        localPoints -= 5
    if slowKijun > slowVWAP
        localPoints += 5
    if slowKijun < slowVWAP
        localPoints -= 5
    if close > ta.vwap(50)
        localPoints += 3
    if close < ta.vwap(50)
        localPoints -= 3
    if close > slowVWAP
        localPoints += 3
    if close < slowVWAP
        localPoints -= 3
    localPoints

calculateCMFPoints(mf, avgCMF, slowCMF, slowAvgCMF) =>
    float localCMFPoints = 0
    if mf > 0
        localCMFPoints += 5
    if mf < 0
        localCMFPoints -= 5
    if mf > avgCMF
        localCMFPoints += 3
    if mf < avgCMF
        localCMFPoints -= 3
    if mf > 0 and mf < 15
        localCMFPoints += 2
    if mf > 20
        localCMFPoints -= 2
    if mf > 25
        localCMFPoints -= 2
    if mf > 30
        localCMFPoints -= 3
    if slowCMF > 0
        localCMFPoints += 5
    if slowCMF < 0
        localCMFPoints -= 5
    if slowCMF > slowAvgCMF
        localCMFPoints += 5
    if slowCMF < slowAvgCMF
        localCMFPoints -= 5
    if cmfChange1 < -cmfDecreaseThreshold or cmfChange2 < -cmfDecreaseThreshold or cmfChange3 < -cmfDecreaseThreshold or cmfChange4 < -cmfDecreaseThreshold or cmfChange5 < -cmfDecreaseThreshold
        localCMFPoints -= 10
    if cmfChange1 > cmfIncreaseThreshold or cmfChange2 > cmfIncreaseThreshold or cmfChange3 > cmfIncreaseThreshold or cmfChange4 > cmfIncreaseThreshold or cmfChange5 > cmfIncreaseThreshold
        localCMFPoints += 10
    localCMFPoints

calculateDIPoints(plus, minus, slowPlus, slowMinus) =>
    localDIPoints = 0
    difference = plus - minus

    if plus > minus
        localDIPoints += 2
    if plus < minus
        localDIPoints -= 2
    if slowPlus > slowMinus
        localDIPoints +=3
    if slowPlus < slowMinus
        localDIPoints -=3
    
    if difference > 40
        localDIPoints += 8
    else if difference > 35
        localDIPoints += 7
    else if difference > 30
        localDIPoints += 6
    else if difference > 25
        localDIPoints += 5
    else if difference > 20
        localDIPoints += 4
    else if difference > 15
        localDIPoints += 3
    else if difference > 10
        localDIPoints += 2
    else if difference > 5
        localDIPoints += 1

    if difference < -40
        localDIPoints -= 8
    else if difference < -35
        localDIPoints -= 7
    else if difference < -30
        localDIPoints -= 6
    else if difference < -25
        localDIPoints -= 5
    else if difference < -20
        localDIPoints -= 4
    else if difference < -15
        localDIPoints -= 3
    else if difference < -10
        localDIPoints -= 2
    else if difference < -5
        localDIPoints -= 1
    
    weeklyDifference = slowPlus - slowMinus
    if weeklyDifference > 40
        localDIPoints += 8
    else if weeklyDifference > 35
        localDIPoints += 7
    else if weeklyDifference > 30
        localDIPoints += 6
    else if weeklyDifference > 25
        localDIPoints += 5
    else if weeklyDifference > 20
        localDIPoints += 4
    else if weeklyDifference > 15
        localDIPoints += 3
    else if weeklyDifference > 10
        localDIPoints += 2
    else if weeklyDifference > 5
        localDIPoints += 1

    if weeklyDifference < -40
        localDIPoints -= 8
    else if weeklyDifference < -35
        localDIPoints -= 7
    else if weeklyDifference < -30
        localDIPoints -= 6
    else if weeklyDifference < -25
        localDIPoints -= 5
    else if weeklyDifference < -20
        localDIPoints -= 4
    else if weeklyDifference < -15
        localDIPoints -= 3
    else if weeklyDifference < -10
        localDIPoints -= 2
    else if weeklyDifference < -5
        localDIPoints -= 1
    localDIPoints

// Calculate Points
points = 0.0

// Check if the crossover happened during the current period or in the last two periods
crossCurrentKijun = ta.barssince(ta.crossover(close, baseLine)) <= 2
crossSlowKijun = ta.barssince(ta.crossover(close, slowKijun)) <= 2

// Use a single call to calculatePoints per logical block
if crossCurrentKijun
    points += 5
    points += calculateKijunPoints(baseLine, slowKijun, crossSlowKijun, slowVWAP)
    points += calculateCMFPoints(mf, avgCMF, slowCMF, slowAvgCMF)
    points += calculateDIPoints(plus, minus, slowPlus, slowMinus)
else if close > baseLine
    points += 2
    if crossCurrentKijun
        points += 3
    points += calculateKijunPoints(baseLine, slowKijun, crossSlowKijun, slowVWAP)
    points += calculateCMFPoints(mf, avgCMF, slowCMF, slowAvgCMF)
    points += calculateDIPoints(plus, minus, slowPlus, slowMinus)
else if close < baseLine
    points -= 5
    points += calculateKijunPoints(baseLine, slowKijun, crossSlowKijun, slowVWAP)
    points += calculateCMFPoints(mf, avgCMF, slowCMF, slowAvgCMF)
    points += calculateDIPoints(plus, minus, slowPlus, slowMinus)
else if close == baseLine
    if crossCurrentKijun
        points += 3
    points += calculateKijunPoints(baseLine, slowKijun, crossSlowKijun, slowVWAP)
    points += calculateCMFPoints(mf, avgCMF, slowCMF, slowAvgCMF)
    points += calculateDIPoints(plus, minus, slowPlus, slowMinus)

// Calculate moving average of Kijun
pointsMA = ta.sma(points,pointsPeriods)
pointsMA2 = ta.sma(points,pointsPeriods2)

// Plot the oscillator with conditional coloring
plot(points, "Points Oscillator", color=points >= 0 ? color.green : color.red, linewidth=2)
plot(pointsMA, "Points Moving Average Oscillator", color=pointsMA >= 0 ? color.green : color.yellow, linewidth=2)
plot(pointsMA2, "Points Moving Average2 Oscillator", color=pointsMA2 >= 0 ? color.blue : color.purple, linewidth=2)

// Add a zero line
hline(0, "Zero Line", color=color.gray, linestyle=hline.style_dashed, linewidth = 2)
hline(30, "Upper Line", color=color.gray, linestyle=hline.style_dashed, linewidth = 1)
hline(-30, "Lower Line", color=color.gray, linestyle=hline.style_dashed, linewidth = 1)

if ta.crossover(close, baseLine)
    label.new(bar_index, pointsMA, "C", color=color.green, textcolor=color.white, style=label.style_label_down, size=size.tiny)
if ta.crossunder(close, baseLine)
    label.new(bar_index, pointsMA, "C", color=color.red, textcolor=color.white, style=label.style_label_up, size=size.tiny)

if ta.crossover(close, slowKijun)
    label.new(bar_index, pointsMA, "S", color=color.green, textcolor=color.white, style=label.style_label_down, size=size.tiny)
if ta.crossunder(close, slowKijun)
    label.new(bar_index, pointsMA, "S", color=color.red, textcolor=color.white, style=label.style_label_up, size=size.tiny)